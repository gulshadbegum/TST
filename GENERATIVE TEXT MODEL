{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generative Text Model Demo: GPT-2 and LSTM\n",
    "This notebook demonstrates how to use a generative text model to produce coherent paragraphs on specific topics using either a pre-trained GPT-2 model or a simple LSTM.\n",
    "\n",
    "*Requirements:*\n",
    "- transformers (for GPT-2)\n",
    "- torch, keras, tensorflow (for LSTM option)\n",
    "- numpy, tqdm\n",
    "\n",
    "You can choose one model to experiment with. GPT-2 is recommended for state-of-the-art results and ease of use."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. GPT-2 Text Generation (Recommended)"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "# Install required packages if not present (uncomment if running in Colab)\n",
    "# !pip install transformers torch\n",
    "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
    "import torch\n",
    "\n",
    "# Load pre-trained GPT-2 (small)\n",
    "tokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n",
    "model = GPT2LMHeadModel.from_pretrained('gpt2')\n",
    "model.eval()\n",
    "\n",
    "def generate_gpt2_text(prompt, max_length=100, temperature=0.8, top_k=50):\n",
    "    input_ids = tokenizer.encode(prompt, return_tensors='pt')\n",
    "    with torch.no_grad():\n",
    "        output = model.generate(\n",
    "            input_ids,\n",
    "            max_length=max_length,\n",
    "            temperature=temperature,\n",
    "            top_k=top_k,\n",
    "            num_return_sequences=1,\n",
    "            pad_token_id=tokenizer.eos_token_id\n",
    "        )\n",
    "    return tokenizer.decode(output[0], skip_special_tokens=True)\n"
   ],
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Generate a paragraph on a specific topic"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "user_prompt = \"Explain the significance of renewable energy in combating climate change.\"\n",
    "generated_text = generate_gpt2_text(user_prompt, max_length=120)\n",
    "print(generated_text)"
   ],
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## 2. (Optional) LSTM Text Generation (Simple Example)\n",
    "This LSTM example is for educational purposes and is not fine-tuned on large datasets. For high-quality text generation, prefer GPT-2 or similar transformer models."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "# Simple LSTM example (toy dataset)\n",
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM, Dense, Embedding\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.utils import to_categorical\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Sample corpus (expand with your own data for better results)\n",
    "corpus = [\n",
    "    \"Artificial intelligence is transforming the world.\",\n",
    "    \"Machine learning enables computers to learn from data.\",\n",
    "    \"Renewable energy is essential for a sustainable future.\",\n",
    "    \"Climate change is a global challenge.\",\n",
    "    \"Solar and wind power are clean energy sources.\"\n",
    "]\n",
    "\n",
    "# Tokenization\n",
    "tokenizer_lstm = Tokenizer()\n",
    "tokenizer_lstm.fit_on_texts(corpus)\n",
    "total_words = len(tokenizer_lstm.word_index) + 1\n",
    "\n",
    "# Generate input sequences\n",
    "input_sequences = []\n",
    "for line in corpus:\n",
    "    token_list = tokenizer_lstm.texts_to_sequences([line])[0]\n",
    "    for i in range(1, len(token_list)):\n",
    "        n_gram_sequence = token_list[:i+1]\n",
    "        input_sequences.append(n_gram_sequence)\n",
    "\n",
    "# Pad sequences\n",
    "max_seq_len = max([len(seq) for seq in input_sequences])\n",
    "input_sequences = pad_sequences(input_sequences, maxlen=max_seq_len, padding='pre')\n",
    "X, y = input_sequences[:,:-1], input_sequences[:,-1]\n",
    "y = to_categorical(y, num_classes=total_words)\n",
    "\n",
    "# Build the model\n",
    "model_lstm = Sequential()\n",
    "model_lstm.add(Embedding(total_words, 10, input_length=max_seq_len-1))\n",
    "model_lstm.add(LSTM(64))\n",
    "model_lstm.add(Dense(total_words, activation='softmax'))\n",
    "model_lstm.compile(loss='categorical_crossentropy', optimizer='adam')\n",
    "\n",
    "# Train (few epochs for demo)\n",
    "model_lstm.fit(X, y, epochs=200, verbose=0)\n",
    "\n",
    "def generate_lstm_text(seed_text, next_words=15):\n",
    "    result = seed_text\n",
    "    for _ in range(next_words):\n",
    "        token_list = tokenizer_lstm.texts_to_sequences([result])[0]\n",
    "        token_list = pad_sequences([token_list], maxlen=max_seq_len-1, padding='pre')\n",
    "        predicted = np.argmax(model_lstm.predict(token_list, verbose=0), axis=-1)\n",
    "        output_word = \"\"\n",
    "        for word, index in tokenizer_lstm.word_index.items():\n",
    "            if index == predicted:\n",
    "                output_word = word\n",
    "                break\n",
    "        if output_word == \"\":\n",
    "            break\n",
    "        result += \" \" + output_word\n",
    "    return result"
   ],
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: LSTM-generated text"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "seed = \"Renewable energy\"\n",
    "print(generate_lstm_text(seed, next_words=10))"
   ],
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## 3. Conclusion\n",
    "This notebook demonstrates generative text with both GPT-2 and a simple LSTM model. For high-quality, topic-coherent paragraphs, modern transformer models like GPT-2 (or larger) are strongly recommended.\n",
    "\n",
    "You can further fine-tune these models on your own topic-specific data for even better results."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
